//===============================================================
//A FreeFem++ script for the tetrahedral meshing of three dimensionnal 
//ellipsoid with tetgen.
//===============================================================
//         alpha : x direction half length
//          beta : y direction half length
//         gamma : z direction half length
//            np : parameter affecting the number of tet in the final mesh (increasing with)
//===============================================================
func mesh3 Buildmesh(string meshkind, real alpha,real beta,real gamma,int np,real hminsurf,real hminvol)
{ mesh3 Th3fin;
   if(meshkind == "ellipsoid"){
//===================================================================================
//Angles utiles
//===================================================================================
	real tan3pi10 = sqrt(25.+10.*sqrt(5.))/5.;//3pi/10 angle entre deux aretes du pentagone
	real sin3pi10 = (sqrt(5)+1)/4;//3pi/10 angle entre deux aretes du pentagone
	real cos3pi10 = sqrt(10-2*sqrt(5))/4;//3pi/10 angle entre deux aretes du pentagone

	real cosdiedre = sqrt(5)/3; //angle diedre de l'icosaedre -pi/2
	real sindiedre = 2./3; //angle diedre de l'icosaedre -pi/2

	real cosico = tan3pi10/sqrt(3); //angle entre une face de la pyramide pentagonale par rapport à l'horizontale
	real sinico = sqrt(1-square(cosico)); //angle entre une face de la pyramide pentagonale par rapport à l'horizontale

	real sin2pi5 = sqrt(10+2*sqrt(5))/4; //2pi/5 angle pour la rotation des aretes du pentagone
	real cos2pi5 = (sqrt(5)-1)/4; //2pi/5 angle pour la rotation des aretes du pentagone

	real cosicod = cosdiedre*cosico+sindiedre*sinico;//angle diedre -pi/2 - ico
	real sinicod = sindiedre*cosico-cosdiedre*sinico;//angle diedre -pi/2 - ico


	real sinpi3 = sqrt(3)/2; //angle du triangle equilateral



	real sinpi5 = cos3pi10;//pi/5 angle de décalage entre deux demi icosaedre
	real cospi5 = sin3pi10;//pi/5 angle de décalage entre deux demi icosaedre

	real tanpi10 = sqrt(25.-10.*sqrt(5.))/5.;//pi/10 
	real h = 0.5*sqrt(3-square(tanpi10));//hauteur du prisme d'ordre 5;

//=================================================================================
//Construction du triangle equilateral en 2D
//=================================================================================
	border a(t=0,1){x=t; y=0; label =1;};
	border b(t=1,0.5){x=t; y=sqrt(3)*(1-t); label =2;};
	border c(t=0.5,0){x=t; y=sqrt(3)*(t); label =3;};
	mesh Triangle= buildmesh(a(np)+b(np)+c(np)); //traingle equilateral

//=================================================================================
//Construction de l'icosaedre
//=================================================================================
	int orientation=1;
	func f = 1;
	int[int]  ref1=[0,1]; 
	int[int]  ref2=[1,2];
	int[int]  ref3=[2,3];
	int[int]  ref4=[2,4,3,5];
	int[int]  ref5=[4,6,5,7];
	int[int]  ref6=[6,8,7,9];
	int[int]  ref7=[8,10,9,11];
	int[int]  ref8(22), ref9(44);
        for(int i=0;i<11;i++){ref8[2*i] = i+1; ref8[2*i+1]=11+i;}
        for(int i=0;i<22;i++){ref9[2*i] = i+1; ref9[2*i+1]=0;}
        /*int[int]  ref81=[1,12,2,13,3,14,4,15,5,16,6,17,7,18,8,19,9,20,10,21,11,22];
        int[int]  ref91=[1,0,2,0,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,21,0,22,0];*/
	
	mesh3 Triangle3 = movemesh23(Triangle,transfo=[x,0,y],label=ref1);//trianglesup

	mesh3 TriangleS = movemesh3(Triangle3,transfo=[x,sinico*y+cosico*z,-cosico*y+sinico*z],label=ref2);//rotation de -(pi - diedre) par rapport à l'axe des x pour former une face de la pyramide pentagonale

	mesh3 TriangleI = movemesh3(TriangleS,transfo=[x,-cosdiedre*y+sindiedre*z,-sindiedre*y-cosdiedre*z],orientation=-orientation,label=ref3);//triangle inf rotation de l'angle diedre par rapport au triangle sup

	mesh3 Triangles = TriangleI+TriangleS;

	mesh3 T1 = movemesh3(Triangles,transfo=[x-0.5,y-sinpi3*cosico,z]);//translation pour que la figure soit sur le bord du pentagone

	mesh3 T2 = movemesh3(T1,transfo=[cos2pi5*x-sin2pi5*y,sin2pi5*x+cos2pi5*y,z],label=ref4);
	mesh3 T3 = movemesh3(T2,transfo=[cos2pi5*x-sin2pi5*y,sin2pi5*x+cos2pi5*y,z],label=ref5);
	mesh3 T4 = movemesh3(T3,transfo=[cos2pi5*x-sin2pi5*y,sin2pi5*x+cos2pi5*y,z],label=ref6);
	mesh3 T5 = movemesh3(T4,transfo=[cos2pi5*x-sin2pi5*y,sin2pi5*x+cos2pi5*y,z],label=ref7);

	mesh3 Tdemi= T1+T2+T3+T4+T5;//moitié de l'icosaedre

	mesh3 Tdemi0 = movemesh3(Tdemi,transfo=[x,y,z+0.5*h]);//moitié supérieure
	mesh3 Tdemi1 = movemesh3(Tdemi0,transfo=[x,y,-z]);//moitié inférieure
	mesh3 Tdemi1rot = movemesh3(Tdemi1,transfo=[cospi5*x-sinpi5*y,sinpi5*x+cospi5*y,z],label=ref8);//rotation de la moitié inférieure pour les emboiter

	mesh3 Ticosaedre = Tdemi0+Tdemi1rot;


//=================================================================================
//Construction de la sphere 3D
//=================================================================================
	real aa =square(1./alpha), bb=square(1./beta), cc =square(1./gamma);
	func metric = sqrt(aa*x*x+bb*y*y+cc*z*z);
	mesh3 Th = movemesh3(Ticosaedre,transfo=[x/metric,y/metric,z/metric]);

        Th =freeyams(Th,metric,hmin=hminsurf,hmax=hminsurf,gradation=1.1);

	real[int] domain = [0.,0.,0.,1,hminvol*hminvol*hminvol/6];
	Th3fin=tetg(Th,switch="paAAQYY",nbofregions=1,regionlist=domain,label=ref9);
   }

   if(meshkind == "cylindre"){
	border cclip(t=0,2*pi){label=1;x=alpha*cos(t);y=alpha*sin(t);};
	cout <<"============  Cylindrical Mesh built with (Rdom)"<<endl;
	mesh Th2=buildmesh(cclip(np));
	func zminT = -gamma;
	func zmaxT = gamma;
	func fx= x;
	func fy= y;
	func fz= z;
	int[int] r1T=[0,0], r2T=[0,0,2,2];
	int[int] r4T=[0,2]; 
	Th3fin=buildlayers(Th2, np,zbound=[zminT,zmaxT],transfo=[fx,fy,fz], labelmid=r2T);
	cout<<"==========================================="<<endl;
   }
  return Th3fin;

}
