//===============================================================
//Module using Ipopt in 3D in order to solve the GP equation. 
//===============================================================

//===============================================================
// Optimizer tunning...
//===============================================================
// maxiter : initial max number of iteration (it will automatically be
//           increased with the mesh quality)
// tol     : optimization tolerance stopping criteria (see the FreeFem++
//           documentation at the IPOPT Algorithm section)
//===============================================================
 
macro Grad(u) [dx(u),dy(u),dz(u)]//EOM
real Lz;

//===============================================================
// Gross Pitaevskii energy matrices buildup
// GPm : sparse matrix of the quadratic part of the GP energy
// dGPm : sparse matrix of the derivative of the quadratic part of GP energy
// NWFm : sparse matrix of the wave function normalization constraint
// dNWFm : derivate of constraint sparse matrix
//===============================================================


matrix GPm;
matrix dGPm;
matrix NWFm;
matrix Lzm;

varf Lzvf([vr,vi],[unr,uni]) = 
	int3d(Th)(ep*( Comega*( y*(-dx(vr)*uni + dx(vi)*unr) + x*(dy(vr)*uni - dy(vi)*unr) ) ) ) ;

varf GPvf([vr,vi],[unr,uni]) = 
	int3d(Th)(ep*(  0.5*Grad(unr)'*Grad(vr) + 0.5*Grad(uni)'*Grad(vi) + (Ctrap - mu)*(unr*vr + uni*vi) ) ) ;
varf dGPvf([vr,vi],[unr,uni]) = 
	int3d(Th)(ep*(  Grad(unr)'*Grad(vr) + Grad(uni)'*Grad(vi) + 2*(Ctrap - mu)*(unr*vr + uni*vi) 
			  + Comega*( y*(-dx(vr)*uni + dx(vi)*unr) + x*(dy(vr)*uni - dy(vi)*unr) )
			  + Comega*( y*(-dx(unr)*vi + dx(uni)*vr) + x*(dy(unr)*vi - dy(uni)*vr) ) ) ) ;
varf GPvfD([vr,vi],[unr,uni]) = 
	int3d(Th)(ep*(  0.5*Grad(unr)'*Grad(vr) + 0.5*Grad(uni)'*Grad(vi) + (Ctrap - mu)*(unr*vr + uni*vi) 
			  + Comega*( y*(-dx(vr)*uni + dx(vi)*unr) + x*(dy(vr)*uni - dy(vi)*unr) ) ) )
			  + on(1,vr=0,vi=0);
varf dGPvfD([vr,vi],[unr,uni]) = 
	int3d(Th)(ep*(  Grad(unr)'*Grad(vr) + Grad(uni)'*Grad(vi) + 2*(Ctrap - mu)*(unr*vr + uni*vi) 
			  + Comega*( y*(-dx(vr)*uni + dx(vi)*unr) + x*(dy(vr)*uni - dy(vi)*unr) )
			  + Comega*( y*(-dx(unr)*vi + dx(uni)*vr) + x*(dy(unr)*vi - dy(uni)*vr) ) ) )
			  + on(1,vr=0,vi=0);
varf NWFvf([vr,vi],[unr,uni]) = int3d(Th)(vr*unr + vi*uni);

func int UpdateMatrices()
{

	rr2     = x*x+ y*y;
	rr      = sqrt(rr2);
	Vbar    = ax*x*x+ay*y*y+az*z*z+a4*rr2*rr2;   /* trapping potential */
	Ctrap   = 0.5*Vbar/(ep*ep);          /* Ctrap function --> 1/2 factor */
	Vbaref  = Vbar-Omop*Omop*rr2;         /* effective trapping potential */
	Ctrapef = 0.5*Vbaref/(ep*ep);         /* effective trapping potential */
	rhoTF  =(mu-Ctrap>0)?(mu-Ctrap):0. ;         /* atomic density Thomas-Fermi*/
	rhoTFef=(mu-Ctrapef>0)?(mu-Ctrapef):0. ;   /* atomic density Thomas-Fermi*/

	GPm = GPvf(Vhvec,Vhvec);
	dGPm = dGPvf(Vhvec,Vhvec);
	NWFm = NWFvf(Vhvec,Vhvec);
        Lzm  = Lzvf(Vhvec,Vhvec);
	return 0;
}


//===============================================================
// Energy and constraint functional
// Matrix returning routines return a global object because
// returning a global sparse matrix which only exist in the function
// local scope is not supported by the current version of FreeFem++
//===============================================================
// Egp 		: Gross-Pitaevskii energy
// dEgp 	: G-P energy first variation
// d2Lag 	: Hessian of the lagrangian functional
// Hessian 	: the matrix returned by d2Lag
// Norm 	: the normalization constraint
// JacNorm 	: the normalization constraint derivative in matricial form (jacobian)
// Jacobian : the matrix returned by Jacnorm
// dNorm 	: the normalization constraint derivative in vectorial form (gradient)
// ____Iter : evaluation counters for each functionnal
//===============================================================

func real Lzp(real[int] &X)
{
	Vhvec [ar,ai];
	ar[] = X;
	real[int] MV = Lzm*X;
	real Lzbili = X'*MV;
	real Lz = Lzbili;
	return Lz;
}

int NRJIter = 0;
func real Egp(real[int] &X)
{
	Vhvec [ar,ai];
	ar[] = X;
	real[int] MV = GPm*X;
	real Ebili = X'*MV;
        Lz =  Lzp(X);
        real Nl = int3d(Th)(ep*(0.5*Cg*(ar^2+ai^2)^2));
	real E = Ebili + Lz + Nl;
	NRJIter++;
	return E;
}

int dNRJIter = 0;
func real[int] dEgp(real[int] &X)
{
	Vhvec [ar,ai];
	ar[] = X;
	varf vdj([vr,vi],[unr,uni]) = int3d(Th)(ep*(2*Cg*(ar*unr+ai*uni)*(ar^2+ai^2)));
    real[int] dE = vdj(0,Vhvec);
    dE += dGPm * X;
    dNRJIter++;
    return dE;
}

int NormIter = 0;
func real[int] Norm(real[int] &X)
{
	real[int] c(1);
	real[int] tmp = NWFm * X;
	c[0] = X'*tmp;
	NormIter++;
	return c;
}

int JacNormIter = 0;
matrix Jacobian;
func matrix JacNorm(real[int] &X)
{
	real[int,int] jacnorm(1,Vhvec.ndof);
	jacnorm(0,:) = NWFm * X;
	jacnorm *= 2.;
	Jacobian = jacnorm;
	JacNormIter++;
	return Jacobian;
}

func real[int] dNorm(real[int] &X)
{
	real[int] dnorm = NWFm * X;
	dnorm *= 2.;
	return dnorm;
}

int d2LagIter = 0;
matrix Hessian;
func matrix d2Lag(real[int] &X)
{
	Vhvec [ar,ai];
	ar[] = X;
	varf vfhnqp([vr,vi],[unr,uni]) = 
		int3d(Th)(ep*(2*Cg*(ar^2+ai^2)*(vr*unr+vi*uni) + 4*Cg*(ar*vr+ai*vi)*(ar*unr+ai*uni)));
	matrix HEgp = vfhnqp(Vhvec,Vhvec);
	HEgp = HEgp + dGPm;
	Hessian = HEgp;
	real egp,kktinfty;

        ofstream fenerg(fcase+"_energ_start_.dat",append);   
        fenerg.precision(12); 
	egp = Egp(X);
	real[int] kkt = dEgp(X);
        real[int] Normuv = Norm(X);
	fenerg<<d2LagIter<<"   "<<kkt.l2<<"   "<<(kktinfty=kkt.linfty)<<"   "<<egp<<"   "<<Lz<<"   "<<Normuv[0]<<"   "<<endl;

	umod = ar^2 + ai^2;
	plot(umod, cmm="Comega="+Comega+"  Cg="+Cg+"  energy="+egp+"  epsiter="+kktinfty+"  iter="+d2LagIter+"("+NRJIter+")",wait=iwait);
	
   
        cout << "iter = "+d2LagIter+"("+NRJIter+")" << "epsiter = " << kktinfty << " Energy = " << egp << endl;
        fout << "iter = "+d2LagIter+"("+NRJIter+")" << "epsiter = " << kktinfty << " Energy = " << egp << endl;
	d2LagIter++;
	return Hessian;
}


//===============================================================
// Initialization of the minimization process
//
// [ur,ui] : the P1 condensate wave function (respectively
//           real and imaginary part)
// lambda  : is a one element array containing the Lagrange
//           multiplier associated with the noramlization
//           constraint
//===============================================================

cout << "Intialization..." << endl;
UpdateMatrices();
Vhvec [Ur,Ui] = [unr,uni];
int ipres;

//===============================================================
// The Optimization...
//===============================================================


for(int k=0;k<nbadapt;++k){
	for(int kk=0;kk<niadapt;++kk){
 
		ipres = IPOPT(Egp,dEgp,d2Lag,Ur[],tol=EPS0, maxiter=ITERMAX*max(k,1));
                cout << (ipres==0 ? "Converged" :  "Unconverged") << endl; 
                fout << (ipres==0 ? "Converged" :  "Unconverged") << endl;
                iter  += d2LagIter;
                siter = funciter(iter);
	        
		     umod = sqrt(Ur^2 + Ui^2);
   		     un = Ur + li*Ui;
		     string filename = fcase + "_iter_"+siter+ (ipres==0 ? "_Converged" :  "_Unconverged");
                     savetecplot3(Th,Vh,filename+ ".tec",Ur,Ui,umod,"unr","uni","Umod","converged_"+scase);

                     if(!ifadaptmsh) restartsave(un,fcase+"_restart_"+siter+".rst",iter);
	        
		if((k!=maerr.n-1 || kk!=niadapt-1) && ifadaptmsh){ 
                        cout << "mesh adapt with error :: " << maerr[k] << endl;
                        fout << "mesh adapt with error :: " << maerr[k] << endl;
                        meshBECadapt(Th,Ur,Ui,ifadaptmsh,hminad,hmaxad,IWAIT,maerr[k],anisoadapt,memory); 
			[Ur,Ui] = [Ur,Ui];
			UpdateMatrices();

                        
                          mysavemesh(Th,fcase+"_restart_"+siter+".mesh",prec);
                          un = Ur + li*Ui;
                          restartsave(un,fcase+"_restart_"+siter+".rst",iter);
                        
		}
	}
}
                 
//===============================================================
// save solution
//===============================================================
unr = Ur;
uni = Ui;
umod = sqrt(unr^2 + uni^2);
un = unr + li*uni;

plot(umod,wait=iwait,cmm="iteration="+iter);
//medit("iteration="+iter,Th,umod,wait=iwait,order=1);

savetecplot3(Th,Vh,fcase + "_Final_" + (ipres==0 ? "Converged" :  "Unconverged")+ ".tec",unr,uni,umod,"unr","uni","Umod","converged_"+scase);

mysavemesh   (Th,fcase+"_fin_"+siter+".mesh",prec);   
restartsave(un,fcase+"_fin_"+siter+".rst",iter);


